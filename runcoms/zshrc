############
# settings #
############
# prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# tmux
if [ -z $TMUX ]; then
  tmuximum
fi

# emacs
[[ $EMACS = t ]] && unsetopt zle

# OPAM configuration
. $HOME/.opam/opam-init/init.zsh >/dev/null 2>/dev/null || true

# Rust
source ~/.cargo/env

# added by travis gem
[ -f $HOME/.travis/travis.sh ] && source $HOME/.travis/travis.sh

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi

################
# key bindings #
################
bindkey '^L' forward-char
bindkey '^H' backward-char
bindkey '^K' kill-line
bindkey '^Y' kill-line
bindkey '^V' yank
bindkey '^B' backward-delete-char

function rs() {
  # read name
  NAME=$(basename $(pwd))
  rename-session ${NAME/./}
  zle reset-prompt
}
zle -N rs
bindkey '^S' rs

function guake-new-tab() {
  guake -n 0
}
zle -N guake-new-tab
bindkey '^T' guake-new-tab

#######################
# aliases (functions) #
#######################
### System ###
alias ubuntu-v='cat /etc/os-release'

### Shell ###
alias zrc='source ~/.zshrc'
alias zenv='source ~/.zshenv'
alias z='zrc && zenv'

### Tools ###
alias pcp='xclip -selection clipboard -in'
alias tls='tmux ls'
alias xmod='xmodmap ~/.Xmodmap'
function to-lower() {
  echo -n $@ | tr "[:upper:]" "[:lower:]" | pcp
}
function to-upper() {
  echo -n $@ | tr "[:lower:]" "[:upper:]" | pcp
}

### Files ###
alias ll='ls -lhF'
alias la='ls -lahF'
alias clear-trash='sudo rm -rf $TRASH/files/* && sudo rm -rf $TRASH/info/*'
function rmrf() {
  mv -vuf $@ $TRASH/files/
}
function count-lines() {
  cat $@ | wc -l
}
function ffind() {
  find ./ -type f -print | xargs grep $@
}

### Editor ###
alias c='code .'
alias cfa='code front api'

### Stack (Haskell) ###
alias se='stack exec'
function se2() {
  app=${PWD##*/}
  stack exec $app $@
}
alias sg='stack ghci'
alias sb='stack build'

### Git ###
alias ga='git add'
alias gb='git branch'
alias gba='git branch --all'
alias gbr='git branch --remote'
alias gbvv='git branch -vv'
alias gc='git checkout'
alias gcb='git checkout -b'
alias gci='git commit --allow-empty -m "Initial commit"'
alias gcl='git clone'
alias gcm='git commit -m'
alias gd='git diff'
alias gf='git fetch'
alias gl='git log'
alias gln='git log -n'
alias glo='git log --oneline'
alias glon='git log --oneline -n'
alias gm='git merge'
alias gp='git push'
alias gpl='git pull'
alias gs='git status'

function gmp() {
  current_branch=$(git symbolic-ref --short HEAD)

  git checkout $@ &&
    git merge $current_branch &&
    git push &&
    git checkout $current_branch
}

### Math ###
function mathrm() {
  rmrf $@*.css_log $@*.hs $@*.tc-log $@*.xml
}
alias updateOEIS='rm -rf .stack-workd/downloaded/ && stack build'

### Ruby ###
alias bundle inatall='bundle install --path=vendor/bundle'

### Others ###
# alias aws='aws2'
alias hcurl='curl -D - -s  -o /dev/null'
alias dokcer='docker'
alias docker-compose='/usr/lib/docker/cli-plugins/docker-compose compose'
alias docker-rm-all='docker rm $(docker ps -a -q)'
alias docker-rmi-all='docker rmi $(docker images -q)'
