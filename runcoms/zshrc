############
# settings #
############
ANSI_COLORS_RESET='\033[0m'
ANSI_COLORS_RED='\033[31m'
ANSI_COLORS_GREEN='\033[32m'
ANSI_COLORS_YELLOW='\033[33m'

function echo-info() {
  echo -e "${ANSI_COLORS_GREEN}[INFO] $1${ANSI_COLORS_RESET}"
}

function echo-warn() {
  echo -e "${ANSI_COLORS_YELLOW}[WARN] $1${ANSI_COLORS_RESET}"
}

function echo-error() {
  echo -e "${ANSI_COLORS_RED}[ERROR] $1${ANSI_COLORS_RESET}" >&2
}

# prezto
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# fzf
source <(fzf --zsh)

# tmux
if [ -z $TMUX ]; then
  tmuximum
fi

# mise
eval "$(~/.local/bin/mise activate zsh)"

# emacs
[[ $EMACS = t ]] && unsetopt zle

# Rust
source ~/.cargo/env

# Haskell
[ -f "/home/okkey/.ghcup/env" ] && source "/home/okkey/.ghcup/env" # ghcup-env

################
# key bindings #
################
bindkey '^L' forward-char
bindkey '^H' backward-char
bindkey '^K' kill-line
bindkey '^Y' kill-line
bindkey '^V' yank
bindkey '^B' backward-delete-char

function rs() {
  # read name
  NAME=$(basename $(pwd))
  rename-session ${NAME/./}
  zle reset-prompt
}
zle -N rs
bindkey '^S' rs

function guake-new-tab() {
  guake -n 0
}
zle -N guake-new-tab
bindkey '^T' guake-new-tab

#######################
# aliases (functions) #
#######################
### System ###
alias arch='uname -m'

### Shell ###
alias szrc='source ~/.zshrc'
alias szenv='source ~/.zshenv'
alias sz='szrc && szenv'

### Tools ###
alias clip='xclip -selection clipboard -in'
alias tls='tmux ls'
alias xmod='xmodmap ~/.Xmodmap'
alias wn='watch -n'
alias wn1='watch -n 1'

function to-lower() {
  echo -n $@ | tr "[:upper:]" "[:lower:]"
}

function to-upper() {
  echo -n $@ | tr "[:lower:]" "[:upper:]"
}

function to-snake() {
  echo -n $@ | sed -E 's/(.)([A-Z])/\1_\2/g' | tr '[A-Z]' '[a-z]'
}

function to-pascal() {
  echo -n $@ | awk -F '_' '{ for (i = 1; i <= NF; i++) { printf toupper(substr($i, 1, 1)) substr($i, 2) } }'
}

function gen-random() {
  local length=${1:-16}
  local charset=${2:-'[:alnum:]'}

  more /dev/urandom | tr -d -c "$charset" | fold -w "$length" | head -n 1
}

function gen-random-graph() {
  gen-random ${1:-16} '[:graph:]'
}

function gen-random-alnum() {
  gen-random ${1:-16} '[:alnum:]'
}

function gen-random-url-safe() {
  gen-random ${1:-16} 'A-Za-z0-9_-'
}

### Files ###
alias ll='ls -lhF'
alias la='ls -lahF'

function trash() {
  if [[ "$1" == "--empty" ]]; then
    empty-trash
    return
  fi

  for file in "$@"; do
    basename=$(basename "$file")
    abs_path=$(realpath "$file")
    echo "Trash '$abs_path'"
    mv -f "$file" "$TRASH/files/"

  info_file="$TRASH/info/${basename}.trashinfo"
  [ -e "$info_file" ] && rm -f "$info_file"
  cat <<END > "$info_file"
[Trash Info]
Path=$abs_path
DeletionDate=$(date +%Y-%m-%dT%H:%M:%S)
END
  done
}

function empty-trash() {
  echo -n "Empty trash? [y/N]: "
  read answer

  if [[ "$answer" =~ ^[Yy]$ ]]; then
    rm -rf "$TRASH/files/*"
    rm -rf "$TRASH/info/*"
  else
    echo "Cancelled."
  fi
}

function count-lines() {
  cat $@ | wc -l
}
alias cl='count-lines'

alias targz='tar cvzf'
alias untargz='tar xvzf'

### Development ###
alias g='git'

alias t='task'

alias z='zed .'
alias zed-config='zed ~/.config/zed'

function code-open-workspace-or-directory() {
  if [ "$#" -eq 1 ]; then
      target_dir="$1"
  else
      target_dir="$PWD"
  fi

  local workspace="$(basename "$target_dir").code-workspace"

  if [ -f "$target_dir/$workspace" ]; then
      echo "Open workspace: $workspace in $target_dir"
      code "$target_dir/$workspace"
  else
      echo "Open directory: $target_dir"
      code "$target_dir"
  fi
}

alias c='code-open-workspace-or-directory'

### AWS ###
function aws-start-proxy() {
  region=us-east-1

  aws ec2 start-instances --region $region --instance-ids $@ &&
    aws ec2 wait instance-status-ok --region $region --instance-ids $@ &&
    aws ec2 describe-instances --region $region --instance-ids $@
}

function aws-stop-proxy() {
  region=us-east-1

  aws ec2 stop-instances --region $region --instance-ids $@ &&
    aws ec2 describe-instances --region $region --instance-ids $@
}

function aws-connect-instance () {
  instance_id=$1
  profile=$2

  aws ec2 start-instances --instance-ids $instance_id --profile $profile

  echo 'waiting...'
  aws ec2 wait instance-status-ok --instance-ids $instance_id --profile $profile

  aws ssm start-session --target $instance_id --profile $profile
}

### Docker ###
alias dokcer='docker'
alias docker-compose='docker compose'

alias dps='docker ps -a'
alias dmg='docker images'

function docker-rm-all() {
  docker rm $(docker ps -a -q)
}

function docker-rmi-all() {
  docker rmi $(docker images -q)
}

### AI Agents ###
function with-ask() {
  cmd="$1"

  echo "[$cmd] Continue previous session? [Y/n]"
  read "answer?> "

  if [[ ${answer:l} =~ ^(n|no)$ ]]; then
    echo "==== Start new session ===="
    $cmd
  else
    echo "==== Continue ===="
    $cmd --continue
  fi
}

alias claude-ask='with-ask claude'
alias cla='claude-ask'

alias codex-ask='with-ask codex'
alias coa='codex-ask'

### Load local zshrc ###
[ -f ~/.zshrc.local ] && source ~/.zshrc.local
